from gmpy2 import isqrt, is_square, invert
# ref : https://tex2e.github.io/blog/crypto/fermat-factorization-method

c = 0x26ab3c9268f0baa2939e56c8a6b78a6922b6cc1dae3fb5c3f327a97231cea72594b77a94bb15a93fa8fa7722bf4cd5a984bddb9d05757c9265fb78cb8e06bfb123bec6777088c2671d16e7eb868454685a48eef88d49f2d9ffd29f03c24ebc7d11fa9371ea862c946ca64d733ee593fe7d82c06ceb744c4bfbf00acb5faad17035f39b5c918645d803bba0e9bc8d284f4c1eaf1433729c473475c9bf1d45ad028a3a5e7453a2c82fcb4fe520299c304281ad907480751dbd230e4dd0579f6de8790080bf42b6af1cbaa5dea7c220637832bcb078d97ff24ef98ac056b2868a0c9408baf737fb75a3fa07733d130bd93135b6324376637401dc35be11c7c1dd91
e = 0x10001
n = 0x4d4949424954414e42676b71686b6947397730424151454641414f43415134414d49494243514b434151424b532f784f7565623853796859736b4c776d324454686f6663655844713733704e6c7537434177663172545946665955676269614b716b4f6679544475724c4f565868576e77636d43526f3948775555457948473373775853354f6f53476d4848706c4d76386372544c6c592b2f68437045466e4c535044636e6c37484937612f6f70724b70436765695a4f7068456949686d3878555171697657715a76477a65563945666a65614161506c7a7475336e7552796663634d6a716f7a72655532306638534e536139774436764b71744167766a7633566170766c525648526650766c57437230395645385731717a6457766b3058576e796968642b33737343674b4258706972796c41543157575a6b366433527971626837626954706556717a6f7645465a7051726d325438596d36544d526b62496d4c6f394f62454f79567650335479554f5574616c6744683169617148576b6e41674d424141453d

def fermat(n):
    assert n%2 != 0 # n%2 == 0 なら偶数だから成立しない
    a = isqrt(n) # n は平方数でなくてもいい
    print("a")
    bb = a**2 - n
    print("bb")

    while not (is_square(bb)):
        a = a + 1
        bb = a**2 -n
        #print(is_square(bb))
    print("x,y")
    x = a + isqrt(bb)
    y = a - isqrt(bb)
    return (x, y)

p, q = fermat_factors(n)

p, q = fermat(n)
l = (p-1) * (q-1)
d = invert(e, l)

print(p,q)

m = pow(c, d, n)

print(log_to_bytes(m))
